{"version":3,"sources":["notification.mp3","CountdownText.tsx","Button.tsx","StageText.tsx","Timer.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","CountdownText","this","props","seconds","React","Component","Button","enabled","onPress","className","onClick","disabled","undefined","children","StageText","stageNo","totalStages","stageName","Timer","callback","timeInterval","timerId","start","console","warn","setInterval","error","stop","clearInterval","App","stages","name","defaultState","secondsLeft","currentStage","timerRunning","timer","notificationSound","nextButtonCallback","state","nextStage","startTimer","length","setState","resetButtonCallback","clearTimer","getDefaultState","tick","currentTime","play","Audio","Notification","volume","enableNextButton","icon","fa","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.054eb44b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/notification.edf88af1.mp3\";","import React from 'react'\r\n\r\ntype Props = {\r\n    seconds: number\r\n}\r\n\r\nclass CountdownText extends React.Component<Props> {\r\n    public render() {\r\n        return this.props.seconds !== 0 ? (\r\n            <div>\r\n                <h1>Time left: {+this.props.seconds}</h1>\r\n            </div>\r\n        ) : (\r\n            <div>\r\n                <h1>Time left: Finished</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CountdownText\r\n","import React from \"react\";\r\nimport \"./Button.css\";\r\n\r\ntype Props = {\r\n    onPress: () => void;\r\n    enabled?: boolean;\r\n};\r\n\r\nclass Button extends React.Component<Props> {\r\n    render() {\r\n        const { enabled, onPress } = this.props;\r\n\r\n        return (\r\n            <button className=\"button\" onClick={onPress} disabled={enabled !== undefined ? !enabled : false}>\r\n                {this.props.children}\r\n            </button>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Button;\r\n","import React from 'react'\r\n\r\ntype Props = {\r\n    stageNo: number\r\n    totalStages: number\r\n    stageName: string\r\n}\r\n\r\nclass StageText extends React.Component<Props> {\r\n    public render() {\r\n        const { stageNo, totalStages, stageName } = this.props\r\n\r\n        return (\r\n            <div>\r\n                <h1>{`Stage ${stageNo} / ${totalStages}: ${stageName}`}</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default StageText\r\n","class Timer {\r\n    private callback?: () => void;\r\n    private timeInterval: number;\r\n    private timerId?: NodeJS.Timeout;\r\n\r\n    constructor(callback: () => void, timeInterval: number) {\r\n        this.callback = callback;\r\n        this.timeInterval = timeInterval;\r\n    }\r\n\r\n    public start = () => {\r\n        if (this.callback) {\r\n            if (!this.timerId) {\r\n                this.timerId = setInterval(this.callback, this.timeInterval);\r\n            } else {\r\n                console.warn(\"Tried to start timer, but it is already running\");\r\n            }\r\n        } else {\r\n            console.error(\"Tried to start timer without a callback\");\r\n        }\r\n    };\r\n\r\n    public stop = () => {\r\n        if (this.timerId) {\r\n            clearInterval(this.timerId);\r\n            this.timerId = undefined;\r\n        } else {\r\n            console.warn(\"Tried to stop timer, but it is already stopped\");\r\n        }\r\n    };\r\n}\r\n\r\nexport default Timer;\r\n","import React from \"react\";\n// import './App.css';\nimport CountdownText from \"./CountdownText\";\nimport Button from \"./Button\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport * as fa from \"@fortawesome/free-solid-svg-icons\";\nimport StageText from \"./StageText\";\nimport Timer from \"./Timer\";\nimport Notification from \"./notification.mp3\";\n\ntype AppState = {\n    secondsLeft: number;\n    currentStage: number;\n    timerRunning: boolean;\n};\n\ntype AppProps = {};\n\ntype Stage = {\n    name: string;\n    seconds: number;\n};\n\nclass App extends React.Component<AppProps, AppState> {\n    private stages: Stage[] = [\n        {\n            name: \"Intro\",\n            seconds: 2\n        },\n        // {\n        //     name: \"Pre Magitek Colossus\",\n        //     seconds: 3\n        // }\n        { name: \"Intro\", seconds: 72 },\n        { name: \"Pre Magitek Colossus\", seconds: 175 },\n        { name: \"Post Magitek Colossus\", seconds: 51 },\n        { name: \"Magitek Armor\", seconds: 65 },\n        { name: \"Nero\", seconds: 337 },\n        { name: \"Gaius 1\", seconds: 101 },\n        { name: \"Gaius 2\", seconds: 290 },\n        { name: \"Ultima\", seconds: 177 },\n        { name: \"Between Ultima Phases\", seconds: 310 },\n        { name: \"Lahabrea\", seconds: 240 }\n    ];\n\n    private defaultState: AppState = {\n        secondsLeft: this.stages[0].seconds,\n        currentStage: 0,\n        timerRunning: false\n    };\n\n    private timer: Timer;\n    private notificationSound: HTMLAudioElement;\n\n    constructor(props: AppProps) {\n        super(props);\n\n        this.state = this.getDefaultState();\n        this.timer = new Timer(this.tick, 1000);\n        this.notificationSound = new Audio(Notification);\n        this.notificationSound.volume = 0.3;\n    }\n\n    componentWillUnmount() {\n        this.clearTimer();\n    }\n\n    public render() {\n        const enableNextButton =\n            this.state.currentStage === this.stages.length - 1 && this.state.secondsLeft === 0\n                ? false\n                : !this.state.timerRunning;\n\n        return (\n            <div className=\"App\">\n                <Button onPress={this.resetButtonCallback}>\n                    <div>Reset</div>\n                    <FontAwesomeIcon icon={fa.faUndo} />\n                </Button>\n\n                <StageText\n                    stageNo={this.state.currentStage + 1}\n                    totalStages={this.stages.length}\n                    stageName={this.stages[this.state.currentStage].name}\n                />\n\n                <CountdownText seconds={this.state.secondsLeft} />\n                <Button onPress={this.nextButtonCallback} enabled={enableNextButton}>\n                    <div>Next</div>\n                    <FontAwesomeIcon icon={fa.faPlay} />\n                </Button>\n            </div>\n        );\n    }\n\n    nextButtonCallback = () => {\n        if (!this.state.timerRunning) {\n            const nextStage = this.state.currentStage + 1;\n\n            if (this.state.currentStage === 0 && this.state.secondsLeft !== 0) {\n                this.startTimer();\n            } else if (nextStage < this.stages.length) {\n                this.startTimer();\n                this.setState({\n                    currentStage: nextStage,\n                    secondsLeft: this.stages[nextStage].seconds\n                });\n            }\n        }\n    };\n\n    resetButtonCallback = () => {\n        this.clearTimer();\n        this.setState(this.getDefaultState());\n    };\n\n    getDefaultState = (): AppState => this.defaultState;\n\n    tick = () => {\n        const nextSecond = this.state.secondsLeft - 1;\n\n        if (nextSecond === 0) {\n            this.clearTimer();\n\n            this.notificationSound.currentTime = 0;\n            this.notificationSound.play();\n        }\n\n        this.setState((state) => ({\n            secondsLeft: state.secondsLeft - 1\n        }));\n    };\n\n    startTimer = () => {\n        this.timer.start();\n        this.setState({ timerRunning: true });\n    };\n\n    clearTimer = () => {\n        this.timer.stop();\n        this.setState({ timerRunning: false });\n    };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}